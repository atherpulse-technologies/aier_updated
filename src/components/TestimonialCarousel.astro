---
import VideoPlayerShorts from './VideoPlayerShorts.astro';

export interface TestimonialData {
  id: number;
  videoUrl: string;
}

interface Props {
  testimonials: TestimonialData[];
  showText?: boolean;
}

const { testimonials, showText = false } = Astro.props;
const carouselId = `testimonial-carousel-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="relative max-w-5xl mx-auto">
    <div class="overflow-hidden">
        <div class="flex transition-transform duration-500 ease-in-out" id={carouselId}>
            {testimonials.map((testimonial) => (
                <div class="w-full flex-shrink-0 flex justify-center">
                    {!showText ? (
                        <!-- Video Layout - Only video with proper 9:16 ratio -->
                        <div class="w-full max-w-xs mx-auto" style="aspect-ratio: 9/16;">
                            <VideoPlayerShorts src={testimonial.videoUrl} />
                        </div>
                    ) : (
                        <!-- Text Layout -->
                        <div class="bg-gray-50 border border-gray-200 rounded-lg p-6 shadow-md hover:shadow-lg transition duration-300 mx-auto max-w-md">
                            <p class="text-gray-600 italic mb-4">
                                "{testimonial.quote}"
                            </p>
                            <div class="flex items-center">
                                <div class="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mr-4">
                                    <i class="fas fa-user text-primary"></i>
                                </div>
                                <div>
                                    <h4 class="text-lg font-semibold text-gray-800">{testimonial.name}</h4>
                                    <p class="text-sm text-gray-500">{testimonial.role}</p>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            ))}
        </div>
    </div>

    <!-- Navigation Arrows -->
    <button 
        class="testimonial-prev absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/90 hover:bg-white text-gray-800 p-3 rounded-full shadow-lg transition-all duration-300 z-20"
        data-carousel={carouselId}
        aria-label="Previous testimonial"
    >
        <i class="fas fa-chevron-left text-lg"></i>
    </button>
    <button 
        class="testimonial-next absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/90 hover:bg-white text-gray-800 p-3 rounded-full shadow-lg transition-all duration-300 z-20"
        data-carousel={carouselId}
        aria-label="Next testimonial"
    >
        <i class="fas fa-chevron-right text-lg"></i>
    </button>

    <!-- Carousel Indicators -->
    <div class="flex justify-center mt-8 space-x-2">
        {testimonials.map((_, index) => (
            <button 
                class="testimonial-dot w-3 h-3 rounded-full bg-gray-300 hover:bg-primary transition-all duration-300"
                data-carousel={carouselId}
                data-slide={index}
            ></button>
        ))}
    </div>
</div>

<script define:vars={{ carouselId, testimonials }}>
    document.addEventListener("DOMContentLoaded", () => {
        const carousel = document.getElementById(carouselId);
        const prevBtn = document.querySelector(`.testimonial-prev[data-carousel="${carouselId}"]`);
        const nextBtn = document.querySelector(`.testimonial-next[data-carousel="${carouselId}"]`);
        const dots = document.querySelectorAll(`.testimonial-dot[data-carousel="${carouselId}"]`);
        
        let currentIndex = 0;
        const totalSlides = testimonials.length;

        function updateCarousel() {
            carousel.style.transform = `translateX(-${currentIndex * 100}%)`;
            
            dots.forEach((dot, index) => {
                dot.classList.toggle("bg-primary", index === currentIndex);
                dot.classList.toggle("bg-gray-300", index !== currentIndex);
            });
        }

        prevBtn.addEventListener("click", () => {
            currentIndex = (currentIndex - 1 + totalSlides) % totalSlides;
            updateCarousel();
        });

        nextBtn.addEventListener("click", () => {
            currentIndex = (currentIndex + 1) % totalSlides;
            updateCarousel();
        });

        dots.forEach((dot, index) => {
            dot.addEventListener("click", () => {
                currentIndex = index;
                updateCarousel();
            });
        });

        updateCarousel();
    });
</script>
